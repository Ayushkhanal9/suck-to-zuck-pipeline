class Solution {
    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length()-1;
        s=s.toLowerCase();
        while (left<right){
            if(!Character.isLetterOrDigit(s.charAt(left))){
                System.out.println("not char left"+ s.charAt(left));
                left+=1;
            }else if(!Character.isLetterOrDigit(s.charAt(right))){
                
                System.out.println("not char right"+ s.charAt(right));
                right-=1;
            }else if(s.charAt(left)==s.charAt(right)){
                System.out.println("samee"+ s.charAt(left)+" = " + s.charAt(right));
                left+=1;
                right-=1;
            }else{
                return false;
            }
        }return true;

    }
}

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length-1;

        while (left<right){
            if (numbers[left]+numbers[right]==target){
                return new int[]{left+1,right+1};
            }else if(numbers[right]+numbers[left]>target){
                right-=1;
            }else if(numbers[right]+numbers[left]<target){
                left+=1;
            }
        }
        return new int[]{};
    }
}

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int left=nums1.length-1;
        int right=nums2.length-1;

        while(right>=0){
            if(nums1[left]==0){
                nums1[left]=nums2[right];
                left--;
                right--;
            }
        }
        Arrays.sort(nums1);
}
}

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n= nums.length;
        int[] array= new int[n];
        int left= 0;
        int right =nums.length-1;

        for(int i = right; i>=0;i--){
            if((Math.abs(nums[left])<Math.abs(nums[right]))){
                array[i]=nums[right]*nums[right];
                right--;
            }else{
                array[i]= nums[left]*nums[left];
                left++;
            }
        }return array;


}
}
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int left = 0;
        int right = 0;
        double sum=0;
        double greaterSum=0;
        double avg=0.00;
        
        while (left < nums.length){
            if(right-left>=k || right>=nums.length){
                if (sum>greaterSum){
                    greaterSum=sum;
                }
                System.out.println("greater " + greaterSum);
                System.out.println("sum " + sum);
                System.out.println(left+ " , " + right);
                left++;
                right=left;
                sum=0;
                System.out.println("sum " + sum);
            }
            else if(right-left<k){
                sum+=nums[right];
                System.out.println(left+ " , " + right);

                right++;
                System.out.println(sum);
            }
            else{
                return greaterSum/k;
            }
        }
        return greaterSum/k;
}
}

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        int maxSum = sum;
        
        for (int i = k; i < nums.length; i++) {
            sum = sum + nums[i] - nums[i-k];
            maxSum = Math.max(maxSum, sum);
        }
        return (double) maxSum / k;
    }
}
public int findLength(int[] nums, int k) {
    int left = 0;
    int curr = 0;
    int ans = 0;

    for (int right = 0; right < nums.length; right++) {
        curr += nums[right];
        while (curr > k) {
            curr -= nums[left];
            left++;
        }

        ans = Math.max(ans, right - left + 1);
    }

    return ans;
}

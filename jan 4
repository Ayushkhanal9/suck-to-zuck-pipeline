class Solution {
    public int[] runningSum(int[] nums) {
        int[] result = new int[nums.length];
        result[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            result[i] = result[i - 1] + nums[i];
        }
        return result;
    }
}
class Solution {
    public int minStartValue(int[] nums) {
        int startValue = 1;
        while (true) {  
            int sum = startValue;
            boolean valid = true;
            for (int num : nums) {
                sum += num;
                if (sum < 1) {
                    valid = false;
                    break;  
                }
            }
            if (valid) {
                return startValue;
            }
            startValue++;  
        }
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> mappy = new HashMap<>();  
        for (int i = 0; i < nums.length; i++) {
            int remainder = target - nums[i];
            if (mappy.containsKey(remainder)) {
                return new int[]{mappy.get(remainder), i};
            }
            mappy.put(nums[i], i);
        }
        return new int[]{};  
}
}
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int left=0;
        int right=1;
        while (nums[left]+nums[right]!=target){
            if (right < nums.length-1){
                right+=1;
            }
            else if(right == nums.length-1){
                left+=1;
                right=left+1;
            }
            
        }
        return new int[]{left, right};
    }
}


class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] results = new int[nums.length];
        int[] sortedNums= nums.clone();
        Arrays.sort(sortedNums);
        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i =0; i<nums.length; i++){
            map.putIfAbsent(sortedNums[i],i);
        }
        
        for(int i=0; i<nums.length;i++){
            results[i]=map.get(nums[i]);
        }

        return results;

    }
}
class Solution {
public int minTimeToVisitAllPoints(int[][] points) {
    int x = points[0][0];
    int y = points[0][1];
    int results = 0;
    
    for(int i = 0; i < points.length - 1; i++) {
        int targetX = points[i + 1][0];
        int targetY = points[i + 1][1];
        
        while(x != targetX || y != targetY) {
            if(x < targetX && y < targetY) {
                x++;
                y++;
                results++;
            }
            else if(x > targetX && y > targetY) {
                x--;
                y--;
                results++;
            }
            else if(x < targetX) {
                x++;
                results++;
            }
            else if(x > targetX) {
                x--;
                results++;
            }
            else if(y < targetY) {
                y++;
                results++;
            }
            else if(y > targetY) {
                y--;
                results++;
            }
        }
    }
    return results;
}
}

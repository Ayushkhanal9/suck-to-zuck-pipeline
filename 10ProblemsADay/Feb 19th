class Solution {
    public boolean hasDuplicate(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int num : nums){            
            if(map.containsKey(num)){
                return true;
            }
            map.putIfAbsent(num,1);
        }
        return false;
    }
}

class Solution {
    public int[] getConcatenation(int[] nums) {
        int[] ans = new int[nums.length*2];
        for(int i =0,j=0; i<ans.length; i++,j++){
            ans[i]=nums[j];
            if (j==nums.length-1){
                j=-1;
            }
        }
        return ans;
    }
}
class Solution {
    public int[] getConcatenation(int[] nums) {
        int[] ans = new int[nums.length*2];
        for(int i =0; i<nums.length; i++){
            ans[i]=nums[i];
            ans[i+nums.length]=nums[i];
        }
        return ans;
    }
}
class Solution {
    public boolean isAnagram(String s, String t) {
        HashMap<Character,Integer> mappy = new HashMap<>();
        HashMap<Character,Integer> mappy2 = new HashMap<>();
        if(s.length()!=t.length()){
            return false;
        }
        for(int i=0; i<s.length();i++){
            mappy.putIfAbsent(s.charAt(i),1);
            mappy2.putIfAbsent(t.charAt(i),1);
            if(mappy.containsKey(s.charAt(i))){
                mappy.put(s.charAt(i), mappy.get(s.charAt(i))+1);
            }
            if(mappy2.containsKey(t.charAt(i))){
                mappy2.put(t.charAt(i),mappy2.get(t.charAt(i))+1);
            }
        }

        return (mappy.equals(mappy2));
    }
}
class Solution {
    public boolean isAnagram(String s, String t) {
        s= s.chars().sorted().mapToObj(c->String.valueOf((char)c)).collect(Collectors.joining());
        char[] tArray= t.toCharArray();
        Arrays.sort(tArray);
        t= new String(tArray);
        System.out.println(s+ " " + t);
        if(s.equals(t)){
            return true;
        }
        return false;
    }
}

class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        } return low;
    }
}
class Solution {
    public int lengthOfLastWord(String s) {
        s = s.trim(); 
        int length = 0;
        int i = s.length() - 1;
        while (i >= 0 && s.charAt(i) != ' ') {
            length++;
            i--;
        }return length;
    }
}
class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;

        for (int i = n - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits; 
            }
            digits[i] = 0; 
        }
        int[] result = new int[n + 1];
        result[0] = 1;
        return result;
    }
}

class Solution {
    public boolean isSubsequence(String s, String t) {
        int left = 0, right = 0;

        while (left < s.length() && right < t.length()) {
            if (s.charAt(left) == t.charAt(right)) {
                left++; 
            }
            right++; 
        } return left == s.length(); 
    }
}

class Solution {
    public int countElements(int[] arr) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++) {
            map.merge(arr[i], 1, Integer::sum);
        }
        
        int count = 0;
        for(int i = 0; i < arr.length; i++) {
            if(map.containsKey(arr[i] + 1)) {
                count++;
            }
        }
        return count;
    }
}


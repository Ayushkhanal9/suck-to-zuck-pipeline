class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] list = new int[nums.length];
        int[] list2 = nums.clone();
        Arrays.sort(list2);
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            map.putIfAbsent(list2[i],i);
        }
        for(int i=0; i<nums.length; i++){
            list[i]=map.get(nums[i]);
        }
        return list;
    }
}
class Solution {
    public int minTimeToVisitAllPoints(int[][] points) {
        int counter =0;
        for(int i =0 ; i<points.length-1; i++){
            int x1 = points[i][0], x2 = points[i+1][0];
            int y1 = points[i][1], y2 = points[i+1][1];
            int xDif = Math.abs(x2-x1);
            int yDif= Math.abs(y2-y1);
            counter+= Math.max(xDif,yDif);
        }
        return counter;

    }
}
class Solution {
    public int maxProfit(int[] prices) {

        int left=0, right =1;
        int profit =0, maxProfit =0;

        while(right<prices.length){
            profit = prices[right]-prices[left];
            if (profit <0){
                left = right;
                right =left+1;
            }
            else{
                maxProfit = Math.max(profit, maxProfit);
                right++;
            }
        }
        return maxProfit;
    }
}
class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] sortedSq= new int[nums.length];
        int left=0, right = nums.length-1;
        int i =nums.length-1;
        if (nums.length ==1){
            nums[0]=nums[0]*nums[0];
            return nums;
        }
        while(i>=0){
            int leftSq = nums[left]*nums[left];
            int rightSq= nums[right]* nums [right];
            if(leftSq>rightSq){
                sortedSq[i]=leftSq;
                left++;
                i--;
            }else{
                sortedSq[i]= rightSq;
                right--;
                i--;
            }
        }
        return sortedSq;
    }
}

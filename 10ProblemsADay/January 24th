class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int left =0, right =0;

        while (right<nums.length){
            if((right-left ) <= k){

                if (left != right && nums[left]==nums[right]){
                    return true;
                }
                right+=1;

            }else{
                left++;
            }
        }
        return false;

    }
}

class Solution {
    public String longestCommonPrefix(String[] strs) {

        String prefixLong = strs[0]; 
        if (strs == null || strs.length == 0) {
            return "";
        }
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefixLong) != 0) {
                prefixLong = prefixLong.substring(0, prefixLong.length() - 1);
                if (prefixLong.isEmpty()) {
                    return "";
                }
            }
        } return prefixLong;
    }
}

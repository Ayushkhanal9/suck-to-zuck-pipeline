class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int left =0, right =0;

        while (right<nums.length){
            if((right-left ) <= k){

                if (left != right && nums[left]==nums[right]){
                    return true;
                }
                right+=1;

            }else{
                left++;
            }
        }
        return false;

    }
}

class Solution {
    public String longestCommonPrefix(String[] strs) {

        String prefixLong = strs[0]; 
        if (strs == null || strs.length == 0) {
            return "";
        }
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefixLong) != 0) {
                prefixLong = prefixLong.substring(0, prefixLong.length() - 1);
                if (prefixLong.isEmpty()) {
                    return "";
                }
            }
        } return prefixLong;
    }
}

class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) return false;  
        if (x == 0) return true;  
        int original = x;
        int reversed = 0;
        while (x > 0) {
            if (reversed > Integer.MAX_VALUE/10){
             return false;
            }
            int digit = x % 10;  
            reversed = (reversed * 10) + digit;  
            x = x / 10;  
        }
        return original == reversed;
    }
}

class Solution {
    public int removeDuplicates(int[] nums) {
        int k = 1; 
        if (nums == null || nums.length == 0) {
            return 0;
        }
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[k-1]) {
                nums[k] = nums[i];
                k++;
            }
        } return k;
    }
}

class Solution {
    public boolean isValid(String s) {
        if (s.length() == 1) {
            return false;
        }
        Deque<Character> stack = new ArrayDeque<>();
        for (int i = 0; i < s.length(); i++) {
            char current = s.charAt(i);
            if (current == '(' || current == '[' || current == '{') {
                stack.push(current);
            } else if (current == ')' || current == ']' || current == '}') {
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.peek();
                if ((current == ')' && top == '(') || (current == '}' && top == '{') || (current == ']' && top == '[')) {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }return stack.isEmpty();
    }
}

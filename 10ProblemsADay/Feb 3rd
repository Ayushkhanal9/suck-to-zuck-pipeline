class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> mappy= new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int remainder = target-nums[i];
            if (mappy.containsKey(remainder)){
                return new int[] {i,mappy.get(remainder)};
            }
            mappy.put(nums[i], i);
        }
        return new int[] {};
    }
}
class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        } return low;
    }
}
class Solution {
   public String countAndSay(int n) {
       if(n == 1) return "1";
       
       String before = countAndSay(n-1);
       StringBuilder result = new StringBuilder();
       int count = 1;
       char currChar = before.charAt(0);
       for(int i = 1; i < before.length(); i++) {
           if(before.charAt(i) == currChar) {
               count++;
           } else {
               result.append(count).append(currChar);
               currChar = before.charAt(i);
               count = 1;
           }
       }
       result.append(count).append(currChar);
       return result.toString();
   }
}
class Solution {
    public int lengthOfLastWord(String s) {
        s = s.trim(); 
        int length = 0;
        int i = s.length() - 1;

        while (i >= 0 && s.charAt(i) != ' ') {
            length++;
            i--;
        }return length;
    }
}

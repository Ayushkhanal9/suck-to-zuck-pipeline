class Solution {
    public int strStr(String haystack, String needle) {
        
        if (needle.isEmpty()) return 0;
        for (int i = 0; i <= haystack.length() - needle.length(); i++) {
            if (haystack.substring(i, i + needle.length()).equals(needle)) {
                return i; 
            }
        }
        return -1; 
    }
}
class Solution {
    public boolean isPalindrome(int x) {
        if (x <0) return false;
        String nums= String.valueOf(x);
        int left =0;
        int right = nums.length()-1;
        while(left<right){
            if(nums.charAt(left) != nums.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
class Solution {
   public String countAndSay(int n) {
       if(n == 1) return "1";
       
       String before = countAndSay(n-1);
       StringBuilder result = new StringBuilder();
       int count = 1;
       char currChar = before.charAt(0);
       for(int i = 1; i < before.length(); i++) {
           if(before.charAt(i) == currChar) {
               count++;
           } else {
               result.append(count).append(currChar);
               currChar = before.charAt(i);
               count = 1;
           }
       }
       result.append(count).append(currChar);
       return result.toString();
   }
}

class Solution {
    public double findMaxAverage(int[] nums, int k) {

        double sum=0;
        if (nums.length==1){
            return (double) nums[0];
        }
        for(int i =0; i<k; i++){
            sum+=nums[i];
        }
        int left=0;
        int right =k;
        double maxSum=sum;
        while(right<nums.length){
            sum-=nums[left];
            left+=1;
            sum+=nums[right];
            right+=1;
            maxSum=Math.max(maxSum,sum);
        }
        return maxSum/k;
    }
}

class Solution {
    public boolean checkIfPangram(String sentence) {
        Set<Character> letters = new HashSet<>();
        String lowerCase = sentence.toLowerCase();
        for(char c: lowerCase.toCharArray()){
            if(Character.isLetter(c)){
                letters.add(c);
            }
        }
        if (letters.size()>=26){return true;}
        else{return false;}
    }
}

class Solution {
    public int search(int[] nums, int target) {
        int low = 0; 
        int high = (nums.length -1);
        while(low <=high){
            int mid= (low+(high-low)/2);
            if (nums[mid]==target){
                return mid;
            } else if ( target > nums[mid] && target < nums[high]){
                low = mid+1;
            } else if ( target < nums[mid]&& target > nums[low]){
                high = mid -1;
            } else{
              return -1;
            }  
        }
        return -1;
    }
}

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode ori = new ListNode(0);
        ListNode curr = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                curr.next = list1;
                list1 = list1.next;
            } else {
                curr.next = list2;
                list2 = list2.next;
            }
            curr = curr.next;
        }


        if (list1 != null) { curr.next = list1;} 
        else {curr.next = list2;}
        return ori.next;
    }

class Solution {
    public int longestOnes(int[] nums, int k) {
        int left =0;
        int right =0;
        int zeroTurns=k;
        int length=0;
        int maxLength =length;

        while (right<nums.length){
            if(nums[right]==1){
                right+=1;
                length+=1;
            }
            else if(nums[right]==0 && zeroTurns>0){
                zeroTurns-=1;
                right+=1;
                length+=1;
            }
            else {
                maxLength = Math.max(maxLength, length);
                
                if (left < right) {
                    if (nums[left] == 0) {
                        zeroTurns++;
                    }
                    length--;
                    left++;
                } else {
                    left++;
                    right++;
                }
            }
        }
        return Math.max(maxLength,length);
    }
}

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int length=0;
        int maxLength=length;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                length+=1;
            }else{
                maxLength=Math.max(maxLength,length);
                length=0;
            }
        }return Math.max(maxLength,length);
    }
}

class Solution {
    public String mergeAlternately(String word1, String word2) {
        int left =0;
        int right =0;
        String str ="";

        while (left < word1.length() || right<word2.length()){
            if(left>word1.length()-1){
                str+=word2.substring(right);
                return str;
            }else if(right>word2.length()-1){
                str+=word1.substring(left);
                return str;
            }else{
                str+=word1.charAt(left);
                str+=word2.charAt(right);
                left++;
                right++;
            }
        }return str;
    }
}

class Solution {
    public String mergeAlternately(String word1, String word2) {
        int left =0, right =0;
        String str ="";

        while (left < word1.length() || right<word2.length()){
            if(left<word1.length()){
                str+=word1.charAt(left);
                left++;
            }
            if(right< word2.length()){
                str+=word2.charAt(right);
                right++;
            }
        }return str;
    }
}

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> results =new ArrayList<>();
        int mostCandies=0;
        for (int i=0; i<candies.length; i++){
            mostCandies=Math.max(candies[i],mostCandies);
        }
        for(int i=0; i<candies.length; i++){
            if (candies[i]+extraCandies>=mostCandies){
                results.add(true);
            }else{
                results.add(false);
            }
        }return results;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> mappy= new HashMap<>();
        for(int i=0; i<nums.length; i++){
            if (mappy.containsKey(nums[i])){
                return true;
            }
            mappy.put(nums[i],i);
        }
        return false;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        int missingNumberSum=0;
        for(int i=0; i<nums.length+1; i++){
            sum+=i;
        }
        for(int j=0; j<nums.length;j++){
            missingNumberSum+=nums[j];
        }
        return sum-missingNumberSum;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i<nums.length;i++){
            if(i!=nums[i]){
                return i;
            }
        }return nums.length;
    }
}

class Solution {   //no work
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> arr= new ArrayList<>();
        int left =1;
        Arrays.sort(nums);
        System.out.println(Arrays.toString(nums));
        for(int i =0; i<nums.length; i++){
            if (left!=nums[i]){
                arr.add(left);
            }
            left++;
        }return arr;
    }
}

class Solution { //fixed O(n) 
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> arr= new ArrayList<>();
        HashMap<Integer, Integer> mappy = new HashMap<>();
        int left = 1;
        for (int i = 0; i<nums.length; i++){
            mappy.putIfAbsent(nums[i],1);
        }
        for(int i=0; i<nums.length; i++){
            if(!mappy.containsKey(left)){
                arr.add(left);
            }
            left+=1;
        }return arr;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> mappy= new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int remainder = target-nums[i];
            if (mappy.containsKey(remainder)){
                return new int[] {i,mappy.get(remainder)};
            }
            mappy.put(nums[i], i);
        }
        return new int[] {};
    }
}

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] output = new int[nums.length];
        int count=0;
        for(int i =0; i<nums.length; i++){
            for(int j=0; j<nums.length; j++){
                if(nums[i]>nums[j]){
                    count+=1;
                }
            }
            output[i]=(count);
            count=0;
        }   
        return output;


    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> mappy= new HashMap<>();
        for(int i=0; i<nums.length; i++){
            if (mappy.containsKey(nums[i])){
                return true;
            }
            mappy.put(nums[i],i);
        }
        return false;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        int missingNumberSum=0;
        for(int i=0; i<nums.length+1; i++){
            sum+=i;
        }
        for(int j=0; j<nums.length;j++){
            missingNumberSum+=nums[j];
        }
        return sum-missingNumberSum;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i<nums.length;i++){
            if(i!=nums[i]){
                return i;
            }
        }return nums.length;
    }
}

class Solution {   //no work
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> arr= new ArrayList<>();
        int left =1;
        Arrays.sort(nums);
        System.out.println(Arrays.toString(nums));
        for(int i =0; i<nums.length; i++){
            if (left!=nums[i]){
                arr.add(left);
            }
            left++;
        }return arr;
    }
}

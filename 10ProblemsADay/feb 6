class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int total = 0;
        int left = 0;
        int curr = 1;
        
        for (int right = 0; right < nums.length; right++) {
            curr *= nums[right];
            while (curr >= k) {
                curr /= nums[left];
                left++;
            }
            total += right - left + 1;
        }
        
        return total;
    }
}

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        int maxSum = sum;
        for (int i = k; i < nums.length; i++) {
            sum = sum + nums[i] - nums[i-k];
            maxSum = Math.max(maxSum, sum);
        }
        return (double) maxSum / k;
    }
}

class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left; 
    }
}

class Solution {
    public int removeDuplicates(int[] arr) {
        int i=0;
        for(int j=1;j<arr.length;j++){
            if(arr[i]!=arr[j]){
                i++;
                arr[i]=arr[j];
            }
        }
        return i+1;
        
    }
}

class Solution {
    public boolean isValid(String s) {
        if (s.length() == 1) {
            return false;
        }
        Deque<Character> stack = new ArrayDeque<>();
        for (int i = 0; i < s.length(); i++) {
            char current = s.charAt(i);
            if (current == '(' || current == '[' || current == '{') {
                stack.push(current);
            } else if (current == ')' || current == ']' || current == '}') {
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.peek();
                if ((current == ')' && top == '(') || 
                    (current == '}' && top == '{') || 
                    (current == ']' && top == '[')) {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
class Solution {
   public int removeElement(int[] nums, int val) {
       int rm = 0;
       for (int i = 0; i < nums.length; i++) {
           if (nums[i] != val) {
               nums[rm] = nums[i];
               rm++;
           }
       }
       return rm;
   }
}
class Solution {
    public int minTimeToVisitAllPoints(int[][] points) {
        int count =0;
        for(int i = 0; i<points.length-1; i++){
            int x1= points[i][0], x2= points[i+1][0];
            int y1= points[i][1], y2= points[i+1][1];
            int xDifference= Math.abs(x2-x1);
            int yDifference= Math.abs(y2-y1);
            count+=Math.max(xDifference,yDifference);
        }
        return count;
    }
}

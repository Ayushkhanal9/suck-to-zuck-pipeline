class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                curr.next = list1;
                list1 = list1.next;
            } else {
                curr.next = list2;
                list2 = list2.next;
            }
            curr = curr.next;
        }
        if (list1 != null) {
            curr.next = list1;
        } else {
            curr.next = list2;
        }


        return dummy.next;
    }

class Solution {
    public String longestCommonPrefix(String[] strs) {

        String prefixLong = strs[0]; 
        if (strs == null || strs.length == 0) {
            return "";
        }

        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefixLong) != 0) {
                prefixLong = prefixLong.substring(0, prefixLong.length() - 1);
                if (prefixLong.isEmpty()) {
                    return "";
                }
            }
        }
        return prefixLong;
    }
}

class Solution {
    public int lengthOfLastWord(String s) {
        String[] parts = s.split(" ");
        return parts[parts.length - 1].length();  
    }
}


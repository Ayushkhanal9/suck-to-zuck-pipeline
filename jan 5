class Solution {
    public int search(int[] nums, int target) {
        int low = 0; 
        int high = nums.length -1;
        while(low <=high){
            int mid= (low+(high-low)/2);
            if (nums[mid]==target){
                return mid;
            }
            else if ( target > nums[mid]){
                low = mid+1;
            }
            else if ( target < nums[mid]){
                high = mid -1;
            }else{
              return -1;
            }
            
        }
        return -1;
    }
}


class Solution {
    public int mySqrt(int x) {
        int left = 0;
        int right = x;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (mid * mid < x) {
                left = mid + 1;
            } else if (mid * mid > x) {
                right = mid - 1;
            } else {
                return mid;
            }
        }

        return right;
    }
}

class Solution {
    public int romanToInt(String s) {
        int total = 0;
        int prevValue = 0;

        for (int i = s.length() - 1; i >= 0; i--) {
            int currentValue = getValue(s.charAt(i));
            System.out.println(currentValue);

            if (currentValue < prevValue) {
                total -= currentValue;
                System.out.println(total);
            } else {
                total += currentValue;
                System.out.println(total);
            }

            prevValue = currentValue;
        }

        return total;
    }

    private int getValue(char c) {
        switch (c) {
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
            default: throw new IllegalArgumentException("not roman " + c);
        }
    }
}

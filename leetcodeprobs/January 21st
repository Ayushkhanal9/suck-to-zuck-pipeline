class Solution {
    public int waysToSplitArray(int[] nums) {
        int n = nums.length;
        long[] prefix = new long[n];
        long left 
        prefix[0] = nums[0];
        
        for (int i = 1; i < n; i++) {
            prefix[i] = nums[i] + prefix[i - 1];
        }
        
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            long left = prefix[i];
            long right = prefix[n - 1] - prefix[i];
            if (left>= right) {
                ans++;
            }
        }
        
        return ans;
    }
}

public boolean[] answerQueries(int[] nums, int[][] queries, int limit) {
    int[] prefix = new int[nums.length];
    int x = 0;
    int y=0;
    int curr =0;
    prefix[0] = nums[0];
    for (int i = 1; i < nums.length; i++) {
        prefix[i] = prefix[i - 1] + nums[i];
    }

    boolean[] ans = new boolean[queries.length];
    for (int i = 0; i < queries.length; i++) {
        x = queries[i][0]; 
        y = queries[i][1];
        curr = prefix[y] - prefix[x] + nums[x];
        ans[i] = curr < limit;
    }
    return ans;
}

class Solution {
    public int[] runningSum(int[] nums) {
        int[] result = new int[nums.length];
        result[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            result[i] = result[i - 1] + nums[i];
        }
        return result;
    }
}


class Solution {
    public int minStartValue(int[] nums) {
        int startValue = 1;
        while (true) {  
            int sum = startValue;
            boolean valid = true;
            for (int num : nums) {
                sum += num;
                if (sum < 1) {
                    valid = false;
                    break;  
                }
            }
            if (valid) {
                return startValue;
            }
            startValue++;  
        }
    }
}

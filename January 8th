class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        for (int num : nums) {
            result ^= num; 
        }
        return result;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> mappy = new HashMap<>();
        for(int i =0; i<nums.length; i++){
            if(mappy.containsKey(nums[i])){
                return true;
            }else{
                mappy.put(nums[i],1);
            }
        }
        return false;
    }
}
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int left =0;
        int right=1;
        int sum=0;

        while (left<right & right<nums.length){
            if((nums[left]==nums[right])&& Math.abs(left-right)<=k){
                return true;
            }else if(right==nums.length-1){
                left+=1;
                right=left+1;
            }else{
                right+=1;
            }
        }return false;


    }
}

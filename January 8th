class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        for (int num : nums) {
            result ^= num; 
        }
        return result;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> mappy = new HashMap<>();
        for(int i =0; i<nums.length; i++){
            if(mappy.containsKey(nums[i])){
                return true;
            }else{
                mappy.put(nums[i],1);
            }
        }
        return false;
    }
}
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int left =0;
        int right=1;
        int sum=0;

        while (left<right & right<nums.length){
            if((nums[left]==nums[right])&& Math.abs(left-right)<=k){
                return true;
            }else if(right==nums.length-1){
                left+=1;
                right=left+1;
            }else{
                right+=1;
            }
        }return false;


    }
}
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> mappy= new HashMap<>();
        for(int i=0; i<nums.length;i++){
            if(mappy.containsKey(nums[i]) && (Math.abs(i-mappy.get(nums[i]))<=k)){
                System.out.print(mappy);
                return true;
            }
               mappy.put(nums[i],i); 
        }
        return false;
}
}

/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low = 1;
        int high = n;
        while (low<=high){
            int mid = low + (int)(((long)high - low) / 2);
            int result = guess(mid);
            if(result <0){
                high = mid-1;
            }else if(result >0){
                low=mid+1;
            }else{
                return mid;
            }
        }
        return low;
    }
}

class Solution {
    public int mostWordsFound(String[] sentences) {
        int j= 0;
        int mostWord=0;
        for(String sentence:sentences){
            int wordCount = sentence.split(" ").length;
            if (wordCount>mostWord){
                mostWord=wordCount;
            }
        }
        return mostWord;
    }
}
